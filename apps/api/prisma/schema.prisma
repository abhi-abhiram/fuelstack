generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int     @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refreshToken      String? @map("refresh_token") @db.Text
  accessToken       String? @map("access_token") @db.Text
  expiresAt         Int?    @map("expires_at")
  tokenType         String? @map("token_type")
  scope             String?
  id_token          String? @db.Text
  sessionState      String? @map("session_state")
  oauthTokenSecret  String? @map("oauth_token_secret")
  oauthToken        String? @map("oauth_token")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  userAgent    String?  @map("user_agent")
  ipAddress    String?  @map("ip_address")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id              Int       @id @default(autoincrement())
  uid             String    @unique @default(cuid())
  firstName       String    @map("first_name") @db.VarChar(200)
  lastName        String    @map("last_name") @db.VarChar(200)
  nickname        String    @unique @db.VarChar(40)
  email           String    @unique @db.VarChar(200)
  password        String?
  emailVerified   DateTime? @map("email_verified")
  image           String?
  roles           String?   @db.Text
  createdAt       DateTime  @default(now()) @map(name: "created_at")
  updatedAt       DateTime  @updatedAt @map(name: "updated_at")
  revokedTimestap DateTime? @map(name: "revoked_timestap")
  accounts        Account[]
  sessions        Session[]
  profiles        Profile[]

  @@map(name: "users")
}

model Profile {
  id            Int       @id @default(autoincrement())
  userId        Int       @map("user_id")
  gender        String?
  birthdate     String?
  phoneNumber   String?   @db.VarChar(40)
  phoneVerified DateTime? @map("phone_verified")
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "profiles")
}

model VerificationRequest {
  id          String   @id @default(cuid())
  identifier  String
  token       String   @unique
  expires     DateTime
  redirectUrl String?  @map("redirect_url")

  @@unique([identifier, token])
  @@map("verification_requests")
}
